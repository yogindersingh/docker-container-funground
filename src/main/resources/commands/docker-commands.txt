//* Note Here i am using open source nginx image you can replace it with required image name

docker version
(returns the version for the client and server)

docker info
(returnns the configuration of docker engine)

docker
(list the available commands for docker)

docker container run --publish 80:80 nginx
(Runs the docker container and exposes the port 80 for port forwarding of the running container)

docker container run --publish 80:80 --detach nginx
(Runs the docker container and exposes the port 80 for port forwarding of the running container but in background)

docker container run --publish 80:80 --detach --name webhost nginx
(Runs the docker container and also specify the name as webhost for the container)
PS(Instead of using --publish you can also use -p instead and -d for detach too)

docker container ls
(list all the running containers)

docker ps
(list all the running containers but this is an old way to list containers)

docker container ls -a
(list all the running containers as well as stopped containers too)

docker container start {{containerId}}
(start the running container with speficified id)

docker container stop {{containerId}}
(stop the running container with specified id)

docker container rm {{containerId}}
(To stop the running container)

docker container rm -f {{containerId}}
(To remove the running container forcefully)

docker container rm {{container1_id}} {{container2_id}}
(To remove multiple containers)

docker container logs {{containerId}}
(To retrieve logs of the container)

docker container logs {{container_name}}
(To retrieve logs of the container by container name)

docker container top {{container_name}}
(To list the processes inside that container)

docker container inspect {{container_name}}
(Details of the container config)

docker container stats
(Peformance stats for all the container running

docker container run -it nginx bash
(-i -> interactive -t -> tty runs a container with interactive bash)

docker container exec -it {{containerId}} bash
(To go inside a running container bash)

docker pull {{imageName}}
(To pull images)

docker pull image {{image_name}}:{{tagName}}
(To pull specific version of that image)
(tagName is basically the version of that particular image)

docker image ls
(list all local images)

docker image history {{image_name}}:{{tagName}}
(To fetch history related to that image)

docker image inspect {{image_name}}
(returns metadata about the image)

docker container port {{container_name}}
(To fetch the port information)

docker container inspect --format {{.NetworkSetting.IPAddress}} webhost(container_name)
(To retrieve the ip information of the container)

docker network ls
(To list all networks)

NOTE: bridge is default network for docker containers.

docker network inspect {{network_name}}
(Get the info related to particular network)

docker network create {{network_name}}
(Create a new network)

docker container run --name nginx2 --network {{network_name}} nginx
(To run a container inside our newly created network)

docker network connect {{network_id}} {{container_id}}
(To connect to specfic network)

docker network disconnect {{network_id}} {{container_id}}
(To disconnect from specfic network)

docker container exec -it {{container1_name}} ping {{container2_name}}
(To ping one container to other container)
Note: You can only ping two containers if they are in the same network.

docker image tag nginx {{newName}}
(If you want to tag existing image to a new tag)

docker image tag {{newName}}:1.1
(if you want to tag existing image with specfic version)

docker image push {{image_tag}}
(To push image to docker hub repository)

docker image build . -t {{tagName}}
(To build docker file (-t stands for tag))
Note: Default docker file name is Dockerfile and if you want to specify different custom name we can use -f flag)

docker image build -f filename -t {{tagName}}
(To build docker file with custom name)

docker image prune
(To clean up dangling images)

docker system prune
(clean up everything)

docker image prune -a
(clean all images we are not using)

docker system df
(To see space usage)

docker volume prun
(To release dangling volumes)

docker volume ls
(List volumes)

docker volume inspect {{volumeId}}
(list volume config)

docker container run -v mysql-db:/var/lib/mysql
(for named volume creation for container)

docker volume create
(to create volumes)

docker container run -v ${pwd}:/var/lib/mysql
(bind host directory to container directory)

docker compose up
(start all services)

docker compose down
(stop all services)

docker compose logs
(To retrieve the logs)

docker compose ps
(List the processes)

docker swarm init
(To intialize swarm as it is not enabled by default)

docker node ls
(list all the active nodes)

docker service create {{image}}
(To create service for specified image)

docker service ls
(list all services)

docker service ps {{serviceId}}
(list the processes running for particular service id)

docker service update {{serviceId}} --replicas 3
(To update any running service)

docker service rm {{serviceid}}
(To remove any service)

docker stack deploy -c {{composefile.yml}}
(To deploy a stack using composeyml)

docker stack ls
(To list stacks )

docker stack ps {{stackName}}
(To check running processes for particular stack)

docker stack services {{stackname}}
(to check services running for particular stack)

docker stack rm {{stackname}}
(to remove any stack)

docker secret create user_name username.txt
(To create secrets)

docker secret ls
(To list secrets)

docker service update --secret --rm
(To remove secret for a docker service)

